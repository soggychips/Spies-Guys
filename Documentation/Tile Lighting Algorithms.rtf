{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww24240\viewh13220\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\f0\fs24 \cf0 \ul \ulc0 Tile Lighting Algorithms\
Spies Vs. Guys\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ulnone \

\b \ul G
\b0 rouping 
\b T
\b0 iles into 
\b R
\b0 ooms:\ulnone \
\
	In order to eliminate changing large portions of code manually every time a new level is created, or an old one edited, the engine runs an algorithm to create a list of rooms, where a room is a list of tile locations, by using the existing information about the tiles. A room is defined as a space of connected tiles, containing no walls, but is surrounded by walls.\
	While the rooms are being established, any light switch tiles found in a room will be assigned a room number, while the other tiles don't need one(?). In game, when a player clicks a light switch, all tiles in the room assigned to the light-switch will become un/lit tiles.\
	\
There will be two searching modes for the algorithm: SeekNextRoom, and FleshOutRoom.\
\
\pard\pardeftab720

\b \cf2 Seek Next Room (SNR):
\b0  \
	Visit tiles incrementally, starting at [0,0] to [mapSize,mapSize] switching to FleshOutRoom mode when an unvisited (non wall/door) tile has been found. \
	When a wall or door is found, mark it as visited, and assign its room to -1, and continue without calling FleshOutRoom. \
	Repeat until all tile locations have been visited (assigned to a room or were found to be walls). \
	It's worth noting that the only tiles you will find if incrementing through X values for each z value (in ascending order) are \
		going to be the left-most bottom most tiles of their respective rooms, \
		OR the left-most bottom missed tiles from the initial Flesh Out Room call for that respective room (due to choke points).\
	=>If an unvisited tile has a wall to the south, it's a new room.\
	=>If an unvisited tile has a visited tile (NOT a wall) to the south, it's in an already established room.\
\

\b Flesh Out Room (FoR): 
\b0 \
	Move counter clockwise as outward as possible, spiraling in, always turning right if an unvisited tile is found, and only moving onto a tile if it hasn't been visited. \
	A facing is used to determine the next tile to visit, and in which direction to be looking for openings. \
	When it finds an opening (always looking to the right), it turns and continues in that direction. \
	If there's no opening to the right, it moves forward. \
	If it can't move forward, it turns left and continues. \
	The direction is biased, meaning there is a goal direction (e.g. south, east). \
	This means when heading in the biased direction, don't look to the right. \
	Return when surrounded by visited tiles.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\
The information needed for this algorithm:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}All tile information (an array)\
{\listtext	\'95	}size of map (above array's length)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\
\
}